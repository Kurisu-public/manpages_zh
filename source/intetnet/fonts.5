.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "FONTS\.CONF" "5" "March 2015" "" ""
.
.SH "NAME"
\fBfonts\.conf\fR \- 字体配置文件
.
.SH "文件概要"
.
.nf

/etc/fonts/fonts\.conf
/etc/fonts/fonts\.dtd
/etc/fonts/conf\.d/
$XDG_CONFIG_HOME/fontconfig/conf\.d/
$XDG_CONFIG_HOME/fontconfig/fonts\.conf
~/\.fonts\.conf\.d/
~/\.fonts\.conf
.
.fi
.
.SH "描述"
\fBFontconfig\fR是一个字体配置函数库，它既提供全局范围的配置，也允许每个用户 进行个性化的配置，应用程序可以通过它访问字体。
.
.SH "功能概览"
Fontconfig由两个模块组成：
.
.IP "1." 4
配置模块，用于解析XML格式的配置文件；
.
.IP "2." 4
匹配模块，根据应用程序请求的字体模式(pattern)，返回最匹配的字体。
.
.IP "" 0
.
.P
\fB字体配置\fR
.
.P
配置模块由以下三部分组成：
.
.IP "1." 4
保存配置信息的\fBFcConfig\fR数据类型
.
.IP "2." 4
解析XML文本的\fBlibexpat\fR库
.
.IP "3." 4
提取配置信息的\fBFcConfigParse\fR函数。
.
.IP "" 0
.
.P
其中，\fBFcConfigParse\fR函数的作用是将XML格式的配置文件中的数据提取出来，填 充到数据类型为\fBFcConfig\fR的变量中。从外部来看，配置\fBFontconfig\fR库，就是编 写一个有效的XML配置文件并将其交给\fBFcConfigParse\fR函数处理。
.
.P
这样做的目的是为了让字体的配置变得相对静态，并且尽可能广泛地在多个应用程 序之间共享。这样，在应用程序之间传递字体名称(见后文的"Font Name")时，可 以获得一致的字体选择。而选用XML作为配置文件的格式，是因为它既便于外部程 序编辑、又有严谨的结构和语法。
.
.P
字体的配置(其实就是\fB<match target="scan">\fR)与字体的匹配(matching)是两个 相互独立的部分。因为某些应用程序希望使用其自身特有的字体匹配方式，它们只 需要通过Fontconfig库获得已有的字体列表，即可执行独立的匹配操作。这种将 配置与匹配分离的做法可以将所有应用程序的字体配置集中到一处。集中的字体配 置可以简化和标准化字体的安装和个性化设置。
.
.P
\fB字体属性\fR
.
.P
虽然字体模式(pattern)理论上可以包含任意属性，但还是有一些约定俗成的属性 及其类型。\fBFontconfig\fR利用其中的一些属性来做字体匹配与补全。其他的属性则 被用于为应用程序的渲染机制提供辅助信息。
.
.P
"补全"是指：当应用程序提交的字体模式缺少某些属性时，\fBFontconfig\fR会通过其 内置的推测规则"补全"这些属性。
.
.IP "" 4
.
.nf

    属性(Property)   类型    描述
    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    family          String   字族名称
    familylang      String   每个字族名称所对应的语言
    style           String   字体风格名称
    stylelang       String   每个字体风格名称所对应的语言
    fullname        String   字体全名(通常包含style)
    fullnamelang    String   每个字体全名所对应的语言
    slant           Int      倾斜度
    weight          Int      粗细程度
    width           Int      宽度
    size            Double   磅大小(point size)
    pixelsize       Double   像素大小(pixel size)
    aspect          Double   在微调(hinting)前将字形(glyph)水平拉宽的倍数。
    spacing         Int      字符间距
    foundry         String   字体制造商名称
    antialias       Bool     渲染字形(glyph)时是否开启抗锯齿功能
    hinting         Bool     渲染字形(glyph)时是否开启微调功能
    autohint        Bool     "true"表示只使用自动微调；"false"表示优先使用内嵌微调，但对于没有内嵌微调的字体仍会使用自动微调。
    hintstyle       Int      微调的程度(同时作用于内嵌微调与自动微调)
    verticallayout  Bool     是否采用竖直排版
    globaladvance   Bool     是否使用字体提供的全局间距值(即将被废弃)
    file            String   字体文件的名称
    index           Int      字体文件内该字体的索引号，由"0"开始计数。
    ftface          FT_Face  使用指定的 Freetype face 对象
    rasterizer      String   使用哪种渲染引擎(rasterizer)(即将被废弃)
    outline         Bool     字形(glyph)是否具有轮廓线
    scalable        Bool     字形(glyph)是否可以缩放
    scale           Double   磅\->像素(point\->pixel)的缩放系数
    dpi             Double   目标dpi(像素/英寸)值
    rgba            Int      LCD子像素的排列顺序
    lcdfilter       Int      LCD filter 的风格
    minspace        Bool     是否消除行间距(也就是使用最小行间距)
    charset         CharSet  字体所支持的Unicode字符的列表
    lang            String   字体所支持的RFC\-3066语言的列表
    fontversion     Int      字体的版本号
    capability      String   字体的排版功能列表
    embeddedbitmap  Bool     是否使用字体中内嵌的点阵字形
    embolden        Bool     字形渲染引擎(rasterizer)是否应该以合成的方式加粗
    fontfeatures    String   要开启的OpenType特性标记(feature tag)列表
    prgname         String   正在运行的程序的名称

    [提示1]有关Int类型的详细说明，可以参考下面对<const>单元的说明。
    [提示2]可以用fc\-query /path/to/foo\.ttf查看字体的属性
.
.fi
.
.IP "" 0
.
.P
\fB字体匹配\fR
.
.P
Fontconfig将接收到的字体模板(pattern)和系统中所有可用字体逐一对比，计算 两者的差距，差距最小的字体将被选中。这样可以确保在任何时候都能返回一个字 体，但无法保证所返回的字体一定与模板的要求完全吻合。
.
.P
要进行字体匹配，应用程序必须首先创建一个字体模板，并在其中包含所期望的字 体的所有属性。模板中的每个属性都可以包含按照优先级排列的多个值：越靠前的 值，优先级越高。也就是说，如果现有字体中有两个字体分别匹配同一个属性的两 个值，那么匹配较前的值的字体被认为"差距更小"，或者说"更为接近"。
.
.P
在匹配字体之前，Fontconfig会首先按照配置文件要求，对应用程序创建的字体模 板进行第一次修改。修改的过程包括\'
.
.P
完成对字体模板的第一次修改之后，Fontconfig将会继续对其执行一系列默认的替 换操作，从而得到一组规范化的属性(包含了全部要素)。这样就可以避免底层的渲 染程序一直为各种未指定的属性提供默认值。
.
.P
字体模板经过第一次修改与规范化两个步骤之后，可以用来和系统中的字体进行匹 配了。模板和系统中每个字体的差距通过以下属性进行计算(按照优先级排序，属 性越靠前，优先级越高):"\fBfoundry,charset,family,lang,spacing,pixelsize, style,slant,weight,antialias,rasterizer,outline\fR"
.
.P
上述规则中有一个特例需要特别注意：字族名称(family)分为强(strong)和弱 (weak)两种不同的绑定(binding)。强字族名称比语言属性(lang)的优先级要高， 而弱字族名称则比语言属性(lang)的优先级要低。
.
.P
如果字体模板中出现字体本身所没有的属性，那么这些属性将会被按原样保留。这 样就可以确保向字体渲染引擎传递的渲染指令和其它数据，不会受到前述的修改与 规范化两个步骤的干扰。
.
.P
经过规范化之后的字体模板，将被按照配置文件的要求进行第二次修改。修改规则 与第一次修改完全相同。最终，经过"第一次修改\-规范化\-第二次修改"处理的字体 模板将会被返回给应用程序。
.
.P
最终返回的字体模板已经包含了充足的字体定位和渲染信息(包括文件名、像素大 小以及其他各种渲染数据)。由于不包含任何专属于FreeType库的信息，所以应用 程序可以自由选择渲染引擎，甚至直接访问字体文件。
.
.P
如前所述，对字体模板的修改实际上是分两次进行的，因为本质上就需要有两个不 同操作：第一次修改决定了如何选取字体：主要是修正字族名称，以及添加合适的 默认值。第二次修改决定了如何渲染已选定的字体：这个步骤必须作用在已选定的 字体上，而不能作用在原始的字体模板上。
.
.P
\fB字体名称\fR
.
.P
注意，是"Font Name"而不是"Family Name"[字族名称]
.
.P
Fontconfig 为字体模板(pattern)规定了一种文本格式，这种格式被称为"Font Name"(字体名称)。它既是Fontconfig接受的格式，也是Fontconfig返回格式。这 种格式由三个部分组成：(1)字族名称列表，(2)磅大小列表，(3)附加的属性值列 表。具体如下：
.
.IP "" 4
.
.nf

        <families>\-<point sizes>:<name1>=<values1>:<name2>=<values2>\.\.\.
.
.fi
.
.IP "" 0
.
.P
属性的名称(name)不需要包含任何字族名称(families)或者磅大小(point sizes) 。如果属性值(values)是一个列表，那么必须用逗号分隔其中的每个项。此外，还 有一些符号常量可以同时指定属性的名称和值。下面是一些例子：
.
.IP "" 4
.
.nf

    字体名称                     含义
    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    Times\-12                     12 磅大小的 Times 正体(Roman)
    Times\-12:bold                12 磅大小的 Times 粗体(Bold)
    Courier:italic               默认大小的 Courier 斜体(Italic)
    Monospace:matrix=1 \.1 0 1    采用合成斜体(obliquing)的用户首选的等宽字体

    字族名称(family)中的 \'\e\', \'\-\', \':\', \',\' 字符必须要使用\'\e\'进行转义。
    类似的，属性值(values)中的 \'\e\', \'=\', \'_\', \':\', \',\' 也必须要使用\'\e\'进行转义。
.
.fi
.
.IP "" 0
.
.P
\fB调试\fR
.
.P
为了帮助诊断字体和应用的各种问题，fontconfig内置了许多调试功能。这些调试 功能可以通过"\fBFC_DEBUG\fR"环境变量进行控制。这个环境变量是个整数值，它的每 个位都对应着一类调试信息。具体如下：
.
.IP "" 4
.
.nf

  Name         Value    Meaning
  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  MATCH            1    显示字体匹配的简要信息
  MATCHV           2    显示字体匹配的扩展信息
  EDIT             4    监视 match/test/edit 的执行
  FONTSET          8    在启动时跟踪字体信息的加载
  CACHE           16    显示字体缓存变化的简要信息
  CACHEV          32    显示字体缓存变化的扩展信息
  PARSE           64    (已废弃)
  SCAN           128    显示扫描字体文件并创建缓存的过程
  SCANV          256    显示扫描字体文件的详细信息
  MEMORY         512    监视 fontconfig 的内存使用量
  CONFIG        1024    监视加载了哪些配置文件
  LANGSET       2048    显示用来创建 lang 的字符集
  OBJTYPES      4096    显示值类型检查失败的消息
.
.fi
.
.IP "" 0
.
.P
将你期望看到的调试信息类别所对应的 Value 值相加，然后赋给"\fBFC_DEBUG\fR"环 境变量，再运行应用程序就可以在标准输出上看到调试信息了。
.
.P
[例子]假如你想查看\'Courier,mono\'的匹配过程，可以在命令行上运行:
.
.IP "" 4
.
.nf

FC_DEBUG=5 fc\-match \-s \'Courier,mono\'
.
.fi
.
.IP "" 0
.
.P
\fB语言标记(Lang Tag)\fR
.
.P
数据库中的每种字体都包含一个它所支持的语言的列表。该列表是通过比较该字体 的Unicode覆盖范围和每种语言的正字法(orthography,界定了每种语言的字符范围 )之后计算出来的。语言的标记符合RFC\-3066规范，形如"语言[\-国家]"(中括号表 示可以省略)。"语言"部分是一个符合ISO 639规范的语言标记，而"国家"部分是一 个符合ISO 3166规范的国家代码。
.
.P
Fontconfig 内置了多种语言的正字法。除非重新编译函数库，否则无法添加新的 正字法。Fontconfig目前支持ISO639\-1命名的139种语言中的122种，以及ISO 639\-2中141种双字母编码的语言和另外30种三字母编码的语言。对于那些同时具备 双字母编码与三字母编码的语言，仅提供双字母编码标记。
.
.P
对于那些在不同地区分别使用不同字符集的语言，fontconfig会针对每个不同的地 区使用不同的正字法。例如：阿塞拜疆语，库尔德语，普什图语，提格里尼亚语， 汉语。
.
.P
\fB配置文件的格式\fR
.
.P
fontconfig的配置文件以XML格式存储。XML格式的优点是易于外部配置工具的编辑 ，同时又拥有严谨的语法结构。由于XML文件是纯文本文件，专家级的用户还可以 直接用文本编辑器处理它们。
.
.P
Fontconfig 文档类型定义在外部实体"fonts\.dtd"中，该文件通常位于默认的字体 设置目录(/etc/fonts)。每个配置文件必须包含如下结构：
.
.IP "" 4
.
.nf

<?xml version="1\.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts\.dtd">
<fontconfig>
\.\.\.
</fontconfig>
.
.fi
.
.IP "" 0
.
.TP
\fB<fontconfig>\fR
字体配置的顶层单元，可以包含0或1个"\fB<config>,<selectfont>\fR"单元 ，以及任意数量的"\fB<dir>,<cachedir>,<include>,<match>,<alias>\fR"单 元。
.
.TP
\fB<dir prefix="default">\fR
这个单元包含一个目录名称，Fontconfig 将会扫描其中的字体文件，然 后将找到的字体添加到系统的可用字体列表中。如果将\'prefix\'设为 "xdg"，那么环境变量 XDG_DATA_HOME 的值将会被作为前缀添加到路径的 头部。详情参见"XDG Base Directory Specification"。
.
.TP
\fB<cachedir prefix="default">\fR
这个单元包含一个目录名称，用于保存字体属性的缓存(为了加速之后的 读取)。默认值是"\fB$XDG_CACHE_HOME/fontconfig\fR"。详情参见"XDG Base Directory Specification"。如果将\'prefix\'设为"xdg"，那么环境变量 "\fBXDG_CACHE_HOME\fR"的值将会被作为前缀添加到路径的头部。如果配置文 件中包含多个\fIcachedir\fR单元，那么在读取缓存时，将会按顺序依次搜索 ，而在写入缓存时，则仅写入第一个有写入权限的目录。缓存文件的名字 遵循"\fIhash value\fR\-\fIarchitecture\fR\.cache\-\fIversion\fR"格式，其中的 "\fB<version>\fR"是字体配置文件的版本号(目前是"3")。
.
.TP
\fB<include ignore_missing="no" prefix="default">\fR
这个单元包含一个额外的配置文件或目录(以\'~\'开头则表示位于用户的家 目录中)。如果是目录，那么该目录中所有文件名符合"[0\-9]\fI\.conf"格式 的文件(以数字开头并以\'\.conf\'结尾)，都将被按照文件名的ASCII顺序依 次处理。注意，这些文件本身必须是具有完整XML结构的字体配置文件(包 含完整的DOCTYPE声明)，而不是用于插入此处的配置片段。当配置文件的 XML数据被 FcConfigParse 函数解析之后，这个单元中所包含的文件(或 目录中文件名符合"[0\-9]\fR\.conf"格式的文件)也会被传递给 \fBFcConfigLoadAndParse\fR函数进行处理，从而将这些文件的内容也整合到 配置中。如果将\'ignore_missing\'设为"yes"(而不是默认的"no")，那么 将不会对丢失的文件或目录发出警告。如果将\'prefix\'设为"xdg"，那么 环境变量 XDG_CONFIG_HOME 的值将会被作为前缀添加到路径的头部。详 情参见"XDG Base Directory Specification"。
.
.TP
\fB<config>\fR
这个单元提供了一个整合附加配置信息的地方。\fB<config>\fR可以包含0或1 个"\fB<blank>, <rescan>\fR"单元。
.
.TP
\fB<blank>\fR
字体中经常会缺少某些字符的字形(glyph)，这些字符在编码中存在，但 是却只能在屏幕上绘制成空白。通过在\fIblank\fR单元中放置原本就应该绘 制成空白的 Unicode 字符(例如空格)，就可以推断出：那些既不包含在 \fIblank\fR中、又被绘制为空白的字符，就是该字体所不支持的字符。这些 不被支持的字符将会从该字体支持的字符集中剔除。\fIblank\fR可以包含任 意数量的\fIint\fR和\fIrange\fR单元，用于指定这些空白字符的Unicode码位 (code point)。
.
.TP
\fB<rescan>\fR
\fIrescan\fR仅可容纳单独一个\fIint\fR单元，表示每隔多少秒自动扫描一次字 体配置文件。每次扫描，Fontconfig 都会验证所有的配置文件和目录， 并自动重建内部的数据结构。
.
.TP
\fB<selectfont>\fR
\fIselectfont\fR通过包含0或1个 \fIrejectfont\fR, \fIacceptfont\fR 单元来设置 字体黑名单与白名单。通过包含一个\fIrejectfont\fR单元，可以明确将某些 字体排除在可用字体列表之外；同样，通过包含一个\fIacceptfont\fR单元， 也可以明确将某些字体包含在可用字体列表之内。
.
.TP
\fB<acceptfont>\fR
\fIacceptfont\fR通过包含任意数量的\fIglob\fR和\fIpattern\fR单元来匹配"白名单 "字体。所有被匹配到的字体都会被列入"白名单"，也就是会被明确包含 在可用字体列表之内，它们既可以用于字体匹配，也可以被列出给应用程 序。注意，"白名单"中的字体永远不会被\fIrejectfont\fR列入"黑名单"。
.
.TP
\fB<rejectfont>\fR
\fIrejectfont\fR通过包含任意数量的\fIglob\fR和\fIpattern\fR单元来匹配"黑名单 "字体。所有被匹配到的字体都会被列入"黑名单"(注意："白名单"中的字 体永远不会被列入"黑名单")，也就是会被明确排除在可用字体列表之外 ：它们既不会被用于字体匹配，也不会被列出给应用程序，就好象系统中 更本不存在这些字体一样。
.
.TP
\fB<glob>\fR
\fIglob\fR单元可以容纳一个shell风格的文件名匹配模式(包含"?"和"\fI")， 用于根据字体的全路径名称进行匹配。可以用于匹配一组特定目录(例如 ：/usr/share/fonts/uglyfont\fR)中的字体，或者用于匹配具有特定后缀 名(例如：*\.pcf\.gz)的字体。不过，基于后缀名的匹配并不总是那么可靠 ，因为并非所有字体文件的命名都十分规范。此外，需要注意的是， \fIglob\fR单元仅可作用于目录，而不能作用于单个字体。
.
.TP
\fB<pattern>\fR
\fIpattern\fR通过包含任意数量的\fIpatelt\fR单元，将字体的属性值与 \fIpatelt\fR单元列出的属性值列表进行比较，如果每个\fIpatelt\fR单元列出的 属性值列表中都至少有一项与输入字体对应的属性值相符，那么就表示该 字体与整个\fIpattern\fR单元的要求相符合。这样就可以基于字体的属性(缩 放,粗细等)来匹配字体，这可比根据字体文件的后缀名匹配要可靠多了。
.
.TP
\fB<patelt name="属性">\fR
首先，必须明确指定"属性"，以表明该\fIpatelt\fR单元要比较的是字体的哪 个属性。其次，\fIpatelt\fR又通过包含一系列常量单元，来指定可与该属性 匹配的值列表。"常量单元"是指：\fIint\fR, \fIdouble\fR,
.
.TP
\fB<match target="目标">\fR

.
.TP
\fB<test qual="品质" name="属性" target="目标" compare="比较" ignore\-blanks="false">\fR

.
.TP
\fB<edit name="属性" mode="修改方式" binding="绑定">\fR
.
.IP "" 4
.
.nf

    "修改方式"              有相同"属性"              无相同"属性"
    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    "assign"(默认值)        替换第一个匹配的值        替换全部值
    "assign_replace"        替换全部值                替换全部值
    "prepend"               在第一个匹配的值之前插入  在值列表的首部插入
    "prepend_first"         在值列表的首部插入        在值列表的首部插入
    "append"                在第一个匹配的值之后添加  在值列表的尾部添加
    "append_last"           在值列表的尾部添加        在值列表的尾部添加
    "delete"                删除第一个匹配的值        删除全部值
    "delete_all"            删除全部值                删除全部值
.
.fi
.
.IP "" 0

.
.TP
\fB<alias binding="绑定">\fR
.
.IP

.
.TP
\fB<family>\fR
用于容纳一个单独的字族名称。
.
.TP
\fB<prefer>, <accept>, <default>\fR
这些单元可以容纳一系列特定顺序的
.
.TP
\fB<int>, <double>, <string>, <bool>\fR
这些单元必须按照其声明的类型容纳一个单独的常量值。\fIbool\fR只能容纳 true 或者 false 。此外，浮点数必须以数字开头，而不能以小数点开头 (例如：必须使用 0\.5 而不是 \.5 ，而对于负数，则必须使用 \-0\.5 而不 是 \-\.5 )。
.
.TP
\fB<matrix>\fR
\fImatrix\fR必须包含4个\fIdouble\fR单元，以指定仿射变换的四个系数(用于合 成斜体)。此外，也可以用表达式单元(参见前面的解释)来替换\fIdouble\fR 单元，但是每个表达式单元的计算结果都必须是数值。
.
.TP
\fB<range>\fR
\fIrange\fR通过包含两个\fIint\fR单元界定一个整数范围(包括两端的整数)。
.
.TP
\fB<charset>\fR
\fIcharset\fR可以包含任意数量的 \fIint\fR, \fIrange\fR 单元，用于表示一组 Unicode码位(code point)。由于每个码位都是一个正整数，都对应着一 个Unicode字符，所以\fIcharset\fR单元相当于定于了一个字符集。
.
.TP
\fB<langset>\fR
\fIlangset\fR必须包含至少一个
.
.TP
\fB<name target="目标">\fR
\fIname\fR必须包含一个字体属性的名称，而单元的值则等于"目标"的该属性 值列表中的第一个值。"目标"的默认值是"default"，表示继承外层
.
.TP
\fB<const>\fR
.
.IP "" 4
.
.nf

    常量            属性            数值  [译者注]
    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    thin            weight          0
    extralight      weight          40
    ultralight      weight          40
    light           weight          50
    book            weight          75
    regular         weight          80
    normal          weight          80
    medium          weight          100
    demibold        weight          180
    semibold        weight          180
    bold            weight          200
    extrabold       weight          205
    black           weight          210
    heavy           weight          210
    roman           slant           0     [正体]
    italic          slant           100   [斜体]
    oblique         slant           110   [合成斜体]
    ultracondensed  width           50
    extracondensed  width           63
    condensed       width           75
    semicondensed   width           87
    normal          width           100
    semiexpanded    width           113
    expanded        width           125
    extraexpanded   width           150
    ultraexpanded   width           200
    proportional    spacing         0    [比例，也就是非等宽，也就是没有统一的宽度，每个字符的宽度都不同]
    dual            spacing         90   [双宽，只有两个固定的宽度，通常是一个全角=两个半角，例如"SimHei"与"幼圆"]
    mono            spacing         100  [等宽，只有一个固定的宽度，也就是每个字符的宽度都完全相同，例如"Courier"]
    charcell        spacing         110  [字符单元，仅用于纯点阵字体，例如"Unifont"]
    unknown         rgba            0    [未知]
    rgb             rgba            1    [横向(水平)"Red Green Blue"，这是最常见的LCD]
    bgr             rgba            2    [横向(水平)"Blue Green Red"]
    vrgb            rgba            3    [纵向(垂直)"Red Green Blue"]
    vbgr            rgba            4    [纵向(垂直)"Blue Green Red"]
    none            rgba            5    [无子像素，也就是非LCD屏，例如传统的CRT显示器]
    lcdnone         lcdfilter       0    [彻底关闭 LCD filter，不推荐，它会导致笔画边缘出现彩色边纹]
    lcddefault      lcdfilter       1    [最大限度的消除彩色边纹，但是可能会增加笔画的模糊程度。多数场合这是最佳选择]
    lcdlight        lcdfilter       2    [减轻笔画的模糊程度，但不能最大限度的消除彩色边纹。少数场合也许效果更好]
    lcdlegacy       lcdfilter       3    [为了与传统的"libXft color filter"兼容而设置，未来会被删除]
    hintnone        hintstyle       0    [禁用微调(包括自动微调与内嵌微调)]
    hintslight      hintstyle       1    [优先保持字符的形态，但是可能会降低笔画的锐利度]
    hintmedium      hintstyle       2    [在字符形态与笔画锐利度之间进行折中，实际效果通常相当于"hintfull"]
    hintfull        hintstyle       3    [优先提高笔画的锐利度，但是可能破坏字符的形态]
.
.fi
.
.IP "" 0

.
.TP
\fB<or>, <and>, <plus>, <minus>, <times>, <divide>\fR
这些单元都必须包含至少两个表达式单元(参见前面的解释)，然后对它们 进行相应的运算：\fIor\fR(或)；\fIand\fR(与)；\fIplus\fR(加)；\fIminus\fR(减)； \fItimes\fR(乘)；\fIdivide\fR(除)。注意，\fIor\fR与\fIand\fR执行的是逻辑运算(而 不是位运算)。
.
.TP
\fB<eq>, <not_eq>, <less>, <less_eq>, <more>, <more_eq>, <contains>, <not_contains>\fR
这些单元都必须包含恰好两个表达式单元(参见前面的解释)，然后对它们 进行相应的运算：\fIeq\fR(等于)；\fInot_eq\fR(不等于)；\fIless\fR(小于)； \fIless_eq\fR(小于等于)；\fImore\fR(大于)；\fImore_eq\fR(大于等于)； \fIcontains\fR(包含)；\fInot_contains\fR(不包含)。他们都会得到一个逻辑结 果(true 或 false)。
.
.TP
\fB<not>, <floor>, <ceil>, <round>, <trunc>\fR
这些单元都必须包含恰好一个表达式单元(参见前面的解释)，然后对它们 进行相应的运算。\fInot\fR执行的是逻辑运算(而不是位运算)，会得到一个 逻辑结果(true 或 false)。其他都是算术运算，都会得到一个整数： \fIfloor\fR表示向下取整；\fIceil\fR表示向上取整；\fIround\fR表示四舍五入； \fItrunc\fR表示去掉小数部分。
.
.TP
\fB<if>\fR
\fIif\fR必须包含恰好三个表达式单元(参见前面的解释)。如果第一个表达式 的值是真，那么整个单元的值就取第二个表达式的值，否则就取第三个表 达式的值。
.
.P
\fB配置文件示例\fR
.
.P
系统配置文件
.
.P
这是一个针对全系统范围的配置文件示例，文件位于 /etc/fonts/fonts\.conf
.
.IP "" 4
.
.nf

    <?xml version="1\.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts\.dtd">
    <!\-\- /etc/fonts/fonts\.conf 文件用于全系统范围的配置 \-\->
    <fontconfig>

    <!\-\- 在下列目录中寻找字体 \-\->
    <dir>/usr/share/fonts</dir>
    <dir>/usr/X11R6/lib/X11/fonts</dir>

    <!\-\- 将过时的 \'mono\' 别名替换为规范的 \'monospace\' \-\->
    <match target="pattern">
        <test qual="any" name="family"><string>mono</string></test>
        <edit name="family" mode="assign"><string>monospace</string></edit>
    </match>

    <!\-\- 将所有无法识别的别名统一替换成 \'sans\-serif\' \-\->
    <match target="pattern">
        <test qual="all" name="family" mode="not_eq"><string>sans\-serif</string></test>
        <test qual="all" name="family" mode="not_eq"><string>serif</string></test>
        <test qual="all" name="family" mode="not_eq"><string>monospace</string></test>
        <edit name="family" mode="append_last"><string>sans\-serif</string></edit>
    </match>

    <!\-\- 加载用户自己定制配置文件，但是即使文件不存在，也不报警 \-\->
    <include ignore_missing="yes" prefix="xdg">fontconfig/fonts\.conf</include>

    <!\-\- 加载本地定制的配置文件，但是即使文件不存在，也不报警 \-\->
    <include ignore_missing="yes">conf\.d</include>
    <include ignore_missing="yes">local\.conf</include>

    <!\-\- 将一些著名的 Type1 字体替换为对应的 TrueType 版本，以改善屏幕显示效果 \-\->
    <alias>
        <family>Times</family>
        <prefer><family>Times New Roman</family></prefer>
        <default><family>serif</family></default>
    </alias>
    <alias>
        <family>Helvetica</family>
        <prefer><family>Arial</family></prefer>
        <default><family>sans</family></default>
    </alias>
    <alias>
        <family>Courier</family>
        <prefer><family>Courier New</family></prefer>
        <default><family>monospace</family></default>
    </alias>

    <!\-\- 为标准的字族名称提供所需的别名，把这个配置段放在用户自己定制配置文件之后，以确保能够覆盖用户的设置 \-\->
    <alias>
        <family>serif</family>
        <prefer><family>Times New Roman</family></prefer>
    </alias>
    <alias>
        <family>sans</family>
        <prefer><family>Arial</family></prefer>
    </alias>
    <alias>
        <family>monospace</family>
        <prefer><family>Andale Mono</family></prefer>
    </alias>

    <\-\- 如果\'family\'包含 \'Courier New\' 或 \'Courier\'，那么就将\'monospace\'添加为备选 \-\->
    <match target="pattern">
        <test name="family" mode="eq"><string>Courier New</string></test>
        <edit name="family" mode="prepend"><string>monospace</string></edit>
    </match>
    <match target="pattern">
        <test name="family" mode="eq"><string>Courier</string></test>
        <edit name="family" mode="prepend"><string>monospace</string></edit>
    </match>

    </fontconfig>
.
.fi
.
.IP "" 0
.
.P
用户配置文件
.
.P
这是一个针对单个用户的配置文件示例，文件位于 $XDG_CONFIG_HOME/fontconfig/fonts\.conf
.
.IP "" 4
.
.nf

    <?xml version="1\.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts\.dtd">
    <!\-\- $XDG_CONFIG_HOME/fontconfig/fonts\.conf 针对单个用户的配置文件 \-\->
    <fontconfig>

    <!\-\- 私人专用的字体文件目录 \-\->
    <dir prefix="xdg">fonts</dir>

    <!\-\- 指定LCD屏次像素的排列顺序为"rgb"。由于次像素平滑只影响渲染而不影响匹配，所以应该总是使用 target="font" \-\->
    <match target="font">
        <edit name="rgba" mode="assign"><const>rgb</const></edit>
    </match>

    <!\-\- 当要求显示中文有衬线字体的时候，使用"WenQuanYi Zen Hei"(文泉驿正黑) \-\->
    <match>
        <!\-\- 如果你不想为所有中文都使用文泉驿正黑，可以将 zh 替换为 zh\-tw 或 zh\-cn 等。 \-\->
        <!\-\- 注意：即使设为 zh\-cn 也依然匹配 zh ，如果你需要精确的匹配，应使用 compare="eq" \-\->
        <test name="lang" compare="contains"><string>zh</string></test>
        <test name="family"><string>serif</string></test>
        <edit name="family" mode="prepend"><string>WenQuanYi Zen Hei</string></edit>
    </match>

    <!\-\- 当要求显示日文无衬线字体的时候，使用"VL Gothic" \-\->
    <match>
        <test name="lang" compare="contains"><string>ja</string></test>
        <test name="family"><string>sans\-serif</string></test>
        <edit name="family" mode="prepend"><string>VL Gothic</string></edit>
    </match>
    </fontconfig>
.
.fi
.
.IP "" 0
.
.SH "文件"
.
.nf

fonts\.conf
    是 fontconfig 库的主配置文件，使用 XML 格式。

conf\.d
    是外部应用程序或本地系统管理员用来保存额外配置文件的目录。
    其中包含的配置文件必须是XML格式，文件名必须以ASCII十进制数字开头，并以字典顺序排序。
    主配置文件 fonts\.conf 通过<include>单元引用此目录。

fonts\.dtd
    是描述配置文件语法规则的DTD文件

$XDG_CONFIG_HOME/fontconfig/conf\.d
~/\.fonts\.conf\.d
    是每个用户用来保存额外配置文件的目录(通常是自动生成的)。其实际位置由主配置文件 fonts\.conf 指定。
    需要注意的是 ~/\.fonts\.conf\.d 已经被反对使用，并会在未来的版本中不再被默认读取。

$XDG_CONFIG_HOME/fontconfig/fonts\.conf
~/\.fonts\.conf
    是每个用户的个性化配置文件。其实际位置由主配置文件 fonts\.conf 指定。
    需要注意的是 ~/\.fonts\.conf 已经被反对使用，并会在未来的版本中不再被默认读取。

$XDG_CACHE_HOME/fontconfig/*\.cache\-*
~/\.fontconfig/*\.cache\-*
    当没有在主缓存目录(<cachedir>)中发现字体的缓存信息时，就会在这些文件中缓存字体的信息。
    这些文件由 fontconfig 自动维护。
    需要注意的是 ~/\.fontconfig/*\.cache\-* 已经被反对使用，并会在未来的版本中不再被默认读取。
.
.fi
.
.SH "环境变量"
.
.nf

FONTCONFIG_FILE
    用于指定主配置文件

FONTCONFIG_PATH
    用于指定保存额外配置文件的目录

FC_DEBUG
    用于指定输出哪些调试信息。参见前面的"调试"小节

FONTCONFIG_USE_MMAP
    接受一个bool值，用于控制在访问缓存文件时，是否使用 mmap(2) 系统调用接口。
    默认情况下，fontconfig 将会检查缓存文件所在的文件系统是否可以安全的使用 mmap(2) 功能。
    明确设置此变量之后，将会跳过这个检测，强制使用或禁用 mmap(2) 功能。
.
.fi
.
.SH "参见"
.
.nf

fc\-cat(1), fc\-cache(1), fc\-list(1), fc\-match(1), fc\-query(1)
.
.fi
.
.SH "版本"
.
.nf

Fontconfig version 2\.11\.1
.
.fi
.
.SH "版权声明"
fonts\.conf 中文手册 译者：金步国 本文译者是一位开源理念的坚定支持者，所以本文虽然不是软件，但是遵照开源的精神发布。
.
.IP "" 4
.
.nf

无担保：本文译者不保证译文内容准确无误，亦不承担任何由于使用此文档所导致的损失。
自由使用：任何人都可以自由的阅读/链接/打印此文档，无需任何附加条件。
名誉权：任何人都可以自由的转载/引用/再创作此文档，但必须保留译者署名并注明出处。
.
.fi
.
.IP "" 0
.
.P
其他作品
.
.P
本文译者十分愿意与他人分享劳动成果，如果你对我的其他翻译作品或者技术文章有兴趣，可以在如下位置查看现有的作品集：
.
.IP "" 4
.
.nf

金步国作品集 [ http://www\.jinbuguo\.com/ ]
.
.fi
.
.IP "" 0

